/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.mdd.cf.tankwar.generator


import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.TankWarGame
import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.FieldSpecification
import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.IntLiteral
import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.RealLiteral
import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.Multiplication
import java.beans.Expression
import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.Addition
import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.IntVarExpression

/**
 * Common generator bits.
 */
class CommonGenerator {
	protected ModelPreprocessor mpp
	protected val TankWarGame twg

	new(ModelPreprocessor mpp) {
		this.mpp = mpp
		twg = mpp.getTankWarGame
	}

	def generateViewPackage() '''«twg.name».view'''

	def generateViewPackageFolder() '''«twg.name»/view'''

	def generateModelPackage() '''«twg.name».model'''

	def generateModelPackageFolder() '''«twg.name»/model'''
	
	def generateLevelPackage() '''«twg.name».level'''
	

	def generateLevelPackageFolder() '''«twg.name»/level'''


	def generateFrameClassName() '''TankClient'''
	
	def generateTankClassName() '''Tank'''
	
	def generateWallClassName() '''Wall'''
	
	def generateMissileClassName() '''Missile'''

	def generateExplodeClassName() '''Explode'''

	def generateAbsLevelClassName() '''Level'''

	def generateLevelClassName(String level) '''Level«level.toFirstUpper»'''

	def generateFieldClassName() '''«twg.name.toFirstUpper»Field'''

	def generateFieldClassFileName() '''«generateModelPackageFolder»/«generateFieldClassName()».java'''



	def generateFieldInitialiserName(FieldSpecification f) '''initialise«f.name.toFirstUpper»Field'''



	def generateFrameClassFileName() '''«generateViewPackageFolder»/«generateFrameClassName()».java'''

	def generateTankClassFileName() '''«generateViewPackageFolder»/«generateTankClassName()».java'''

	def generateWallClassFileName() '''«generateViewPackageFolder»/«generateWallClassName()».java'''

	def generateMissileClassFileName() '''«generateViewPackageFolder»/«generateMissileClassName()».java'''

	def generateExplodeClassFileName() '''«generateViewPackageFolder»/«generateExplodeClassName()».java'''
	
	def generateLevelClassFileName(String level) '''«generateLevelPackageFolder»/«generateLevelClassName(level.toFirstUpper)».java'''
		
	def generateAbsLevelClassFileName() '''«generateLevelPackageFolder»/«generateAbsLevelClassName».java'''
	
			
	def String generateJavaExpression(Expression exp) {
		exp.evaluate.translateToJavaString
	}
	
	dispatch def Number evaluate(Expression exp) { null }
	dispatch def Number evaluate(Addition exp) {
		val evaluatedChildren = #[exp.left.evaluate] + exp.right.map[evaluate]
		
		val Number[] result = #[null]
		
		evaluatedChildren.forEach[ec, idx |
			result.set(0, 
				if (idx > 0) {
					if (exp.operator.get(idx - 1) == '+') {
						result.get(0).add(ec)
					} else {
						result.get(0).subtract(ec)						
					}
				} else {
					ec
				})
		]
		
		result.get(0)
	}
	
	dispatch def Number evaluate(Multiplication exp) {
		val evaluatedChildren = #[exp.left.evaluate] + exp.right.map[evaluate]
		
		val Number[] result = #[null]
		
		evaluatedChildren.forEach[ec, idx |
			result.set(0, 
				if (idx > 0) {
					if (exp.operator.get(idx - 1) == '*') {
						result.get(0).multiply(ec)
					} else {
						result.get(0).divide(ec)						
					}
				} else {
					ec
				})
		]
		
		result.get(0)
	}
	
	dispatch def Number evaluate(IntLiteral exp) { exp.^val }
	dispatch def Number evaluate(IntVarExpression exp) { exp.^var.value }
	
	dispatch def Number evaluate(RealLiteral exp) { exp.^val }
		
	dispatch def Number add(Integer a, Number b) {
		if (b instanceof Integer) {
			Integer.valueOf(a.intValue + b.intValue)
		} else {
			a.floatValue + (b as Float).floatValue		
		}
	}
	dispatch def Number add(Float a, Number b) {
		if (b instanceof Integer) {
			a.floatValue + b.floatValue
		} else {
			a.floatValue + (b as Float).floatValue			
		}
	}
	
	dispatch def Number subtract(Integer a, Number b) {
		if (b instanceof Integer) {
			Integer.valueOf(a.intValue - b.intValue)
		} else {
			a.floatValue - (b as Float).floatValue		
		}
	}
	dispatch def Number subtract(Float a, Number b) {
		if (b instanceof Integer) {
			a.floatValue - b.floatValue
		} else {
			a.floatValue - (b as Float).floatValue			
		}
	}
	
	dispatch def Number multiply(Integer a, Number b) {
		if (b instanceof Integer) {
			(Float.valueOf(a.intValue)) / (Float.valueOf(b.intValue))
		} else {
			a.floatValue * (b as Float).floatValue		
		}
	}
	dispatch def Number multiply(Float a, Number b) {
		if (b instanceof Integer) {
			a.floatValue * b.floatValue
		} else {
			a.floatValue * (b as Float).floatValue			
		}
	}
	
	dispatch def Number divide(Integer a, Number b) {
		if (b instanceof Integer) {
			Integer.valueOf(a.intValue / b.intValue)
		} else {
			a.floatValue / (b as Float).floatValue		
		}
	}
	dispatch def Number divide(Float a, Number b) {
		if (b instanceof Integer) {
			a.floatValue / b.floatValue
		} else {
			a.floatValue / (b as Float).floatValue			
		}
	}
	dispatch def String translateToJavaString(Number n) { n.toString }
	dispatch def String translateToJavaString(Float f) '''«f.toString»f'''
	
}
