/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.mdd.cf.tankwar.tankWar.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TankWarFactoryImpl extends EFactoryImpl implements TankWarFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TankWarFactory init()
  {
    try
    {
      TankWarFactory theTankWarFactory = (TankWarFactory)EPackage.Registry.INSTANCE.getEFactory(TankWarPackage.eNS_URI);
      if (theTankWarFactory != null)
      {
        return theTankWarFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TankWarFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TankWarFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TankWarPackage.TANK_WAR_GAME: return createTankWarGame();
      case TankWarPackage.END_GAME_BEHAVIOUR: return createEndGameBehaviour();
      case TankWarPackage.SCREEN_SPECIFICATION: return createScreenSpecification();
      case TankWarPackage.OBSTACLEPECIFICATION: return createObstaclepecification();
      case TankWarPackage.OBSTACLE_MEMBER: return createObstacleMember();
      case TankWarPackage.WATER_OBSTACLE: return createWaterObstacle();
      case TankWarPackage.WALL_OBSTACLE: return createWallObstacle();
      case TankWarPackage.FIELD_SPECIFICATION: return createFieldSpecification();
      case TankWarPackage.OPTION_SPECIFICATION: return createOptionSpecification();
      case TankWarPackage.SUPER_MODE_DECLARATION: return createSuperModeDeclaration();
      case TankWarPackage.START_FIELD_DECLARATION: return createStartFieldDeclaration();
      case TankWarPackage.ALLOW_RESTART_MENU: return createAllowRestartMenu();
      case TankWarPackage.EXPRESSION: return createExpression();
      case TankWarPackage.INT_LITERAL: return createIntLiteral();
      case TankWarPackage.REAL_LITERAL: return createRealLiteral();
      case TankWarPackage.ADDITION: return createAddition();
      case TankWarPackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TankWarGame createTankWarGame()
  {
    TankWarGameImpl tankWarGame = new TankWarGameImpl();
    return tankWarGame;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndGameBehaviour createEndGameBehaviour()
  {
    EndGameBehaviourImpl endGameBehaviour = new EndGameBehaviourImpl();
    return endGameBehaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScreenSpecification createScreenSpecification()
  {
    ScreenSpecificationImpl screenSpecification = new ScreenSpecificationImpl();
    return screenSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Obstaclepecification createObstaclepecification()
  {
    ObstaclepecificationImpl obstaclepecification = new ObstaclepecificationImpl();
    return obstaclepecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObstacleMember createObstacleMember()
  {
    ObstacleMemberImpl obstacleMember = new ObstacleMemberImpl();
    return obstacleMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WaterObstacle createWaterObstacle()
  {
    WaterObstacleImpl waterObstacle = new WaterObstacleImpl();
    return waterObstacle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WallObstacle createWallObstacle()
  {
    WallObstacleImpl wallObstacle = new WallObstacleImpl();
    return wallObstacle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldSpecification createFieldSpecification()
  {
    FieldSpecificationImpl fieldSpecification = new FieldSpecificationImpl();
    return fieldSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OptionSpecification createOptionSpecification()
  {
    OptionSpecificationImpl optionSpecification = new OptionSpecificationImpl();
    return optionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SuperModeDeclaration createSuperModeDeclaration()
  {
    SuperModeDeclarationImpl superModeDeclaration = new SuperModeDeclarationImpl();
    return superModeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartFieldDeclaration createStartFieldDeclaration()
  {
    StartFieldDeclarationImpl startFieldDeclaration = new StartFieldDeclarationImpl();
    return startFieldDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllowRestartMenu createAllowRestartMenu()
  {
    AllowRestartMenuImpl allowRestartMenu = new AllowRestartMenuImpl();
    return allowRestartMenu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TankWarPackage getTankWarPackage()
  {
    return (TankWarPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TankWarPackage getPackage()
  {
    return TankWarPackage.eINSTANCE;
  }

} //TankWarFactoryImpl
