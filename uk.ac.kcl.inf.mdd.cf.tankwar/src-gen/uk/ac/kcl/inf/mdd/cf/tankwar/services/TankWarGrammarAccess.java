/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.mdd.cf.tankwar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TankWarGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TankWarGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.TankWarGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScreenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScreenScreenSpecificationParserRuleCall_3_0 = (RuleCall)cScreenAssignment_3.eContents().get(0);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldSpecificationParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Assignment cOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionsOptionSpecificationParserRuleCall_5_0 = (RuleCall)cOptionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TankWarGame:
		//	"game" name=ID "{"
		//	screen=ScreenSpecification
		//	fields+=FieldSpecification+
		//	options+=OptionSpecification+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"game" name=ID "{"
		//screen=ScreenSpecification
		//fields+=FieldSpecification+
		//options+=OptionSpecification+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"game"
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//screen=ScreenSpecification
		public Assignment getScreenAssignment_3() { return cScreenAssignment_3; }
		
		//ScreenSpecification
		public RuleCall getScreenScreenSpecificationParserRuleCall_3_0() { return cScreenScreenSpecificationParserRuleCall_3_0; }
		
		//fields+=FieldSpecification+
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }
		
		//FieldSpecification
		public RuleCall getFieldsFieldSpecificationParserRuleCall_4_0() { return cFieldsFieldSpecificationParserRuleCall_4_0; }
		
		//options+=OptionSpecification+
		public Assignment getOptionsAssignment_5() { return cOptionsAssignment_5; }
		
		//OptionSpecification
		public RuleCall getOptionsOptionSpecificationParserRuleCall_5_0() { return cOptionsOptionSpecificationParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDirectBehaviourParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	StringValue | IntValue | DirectBehaviour;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | IntValue | DirectBehaviour
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }
		
		//DirectBehaviour
		public RuleCall getDirectBehaviourParserRuleCall_2() { return cDirectBehaviourParserRuleCall_2; }
	}
	public class DirectBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.DirectBehaviour");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndGameBehaviourParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cNoOpBehaviourParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cNoOpBehaviourAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//DirectBehaviour:
		//	EndGameBehaviour | NoOpBehaviour {NoOpBehaviour};
		@Override public ParserRule getRule() { return rule; }
		
		//EndGameBehaviour | NoOpBehaviour {NoOpBehaviour}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EndGameBehaviour
		public RuleCall getEndGameBehaviourParserRuleCall_0() { return cEndGameBehaviourParserRuleCall_0; }
		
		//NoOpBehaviour {NoOpBehaviour}
		public Group getGroup_1() { return cGroup_1; }
		
		//NoOpBehaviour
		public RuleCall getNoOpBehaviourParserRuleCall_1_0() { return cNoOpBehaviourParserRuleCall_1_0; }
		
		//{NoOpBehaviour}
		public Action getNoOpBehaviourAction_1_1() { return cNoOpBehaviourAction_1_1; }
	}
	public class EndGameBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.EndGameBehaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWinSTRINGTerminalRuleCall_2_0 = (RuleCall)cWinAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLostAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLostSTRINGTerminalRuleCall_4_0 = (RuleCall)cLostAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EndGameBehaviour:
		//	"end-game" "(" win=STRING "," lost=STRING ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"end-game" "(" win=STRING "," lost=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//"end-game"
		public Keyword getEndGameKeyword_0() { return cEndGameKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//win=STRING
		public Assignment getWinAssignment_2() { return cWinAssignment_2; }
		
		//STRING
		public RuleCall getWinSTRINGTerminalRuleCall_2_0() { return cWinSTRINGTerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//lost=STRING
		public Assignment getLostAssignment_4() { return cLostAssignment_4; }
		
		//STRING
		public RuleCall getLostSTRINGTerminalRuleCall_4_0() { return cLostSTRINGTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class NoOpBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.NoOpBehaviour");
		private final Keyword cNopKeyword = (Keyword)rule.eContents().get(1);
		
		//NoOpBehaviour:
		//	"nop";
		@Override public ParserRule getRule() { return rule; }
		
		//"nop"
		public Keyword getNopKeyword() { return cNopKeyword; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ScreenSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.ScreenSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScreenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cScreenWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScreenWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScreenWidthINTTerminalRuleCall_5_0 = (RuleCall)cScreenWidthAssignment_5.eContents().get(0);
		private final Keyword cScreenHeightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cScreenHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cScreenHeightINTTerminalRuleCall_8_0 = (RuleCall)cScreenHeightAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ScreenSpecification:
		//	"screen" name=ID "{"
		//	"screenWidth" "=" screenWidth=INT
		//	"screenHeight" "=" screenHeight=INT
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"screen" name=ID "{"
		//"screenWidth" "=" screenWidth=INT
		//"screenHeight" "=" screenHeight=INT
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"screen"
		public Keyword getScreenKeyword_0() { return cScreenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"screenWidth"
		public Keyword getScreenWidthKeyword_3() { return cScreenWidthKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//screenWidth=INT
		public Assignment getScreenWidthAssignment_5() { return cScreenWidthAssignment_5; }
		
		//INT
		public RuleCall getScreenWidthINTTerminalRuleCall_5_0() { return cScreenWidthINTTerminalRuleCall_5_0; }
		
		//"screenHeight"
		public Keyword getScreenHeightKeyword_6() { return cScreenHeightKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//screenHeight=INT
		public Assignment getScreenHeightAssignment_8() { return cScreenHeightAssignment_8; }
		
		//INT
		public RuleCall getScreenHeightINTTerminalRuleCall_8_0() { return cScreenHeightINTTerminalRuleCall_8_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ObstaclepecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.Obstaclepecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObstacleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsObstacleMemberParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Obstaclepecification:
		//	"obstacle" name=ID "{"
		//	fields+=ObstacleMember*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"obstacle" name=ID "{"
		//fields+=ObstacleMember*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"obstacle"
		public Keyword getObstacleKeyword_0() { return cObstacleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=ObstacleMember*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//ObstacleMember
		public RuleCall getFieldsObstacleMemberParserRuleCall_3_0() { return cFieldsObstacleMemberParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ObstacleMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.ObstacleMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWallObstacleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWaterObstacleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ObstacleMember:
		//	WallObstacle | WaterObstacle;
		@Override public ParserRule getRule() { return rule; }
		
		//WallObstacle | WaterObstacle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WallObstacle
		public RuleCall getWallObstacleParserRuleCall_0() { return cWallObstacleParserRuleCall_0; }
		
		//WaterObstacle
		public RuleCall getWaterObstacleParserRuleCall_1() { return cWaterObstacleParserRuleCall_1; }
	}
	public class WaterObstacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.WaterObstacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WaterObstacle:
		//	"water" name=ID "{"
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"water" name=ID "{"
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"water"
		public Keyword getWaterKeyword_0() { return cWaterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class WallObstacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.WallObstacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWallWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWallWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWallWidthINTTerminalRuleCall_5_0 = (RuleCall)cWallWidthAssignment_5.eContents().get(0);
		private final Keyword cWallHeightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWallHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWallHeightINTTerminalRuleCall_8_0 = (RuleCall)cWallHeightAssignment_8.eContents().get(0);
		private final Keyword cWallPosXKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWallPosXAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWallPosXINTTerminalRuleCall_11_0 = (RuleCall)cWallPosXAssignment_11.eContents().get(0);
		private final Keyword cWallPosYKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cWallPosYAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cWallPosYINTTerminalRuleCall_14_0 = (RuleCall)cWallPosYAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//WallObstacle:
		//	"wall" name=ID "{"
		//	"wallWidth" "=" wallWidth=INT
		//	"wallHeight" "=" wallHeight=INT
		//	"wallPosX" "=" wallPosX=INT
		//	"wallPosY" "=" wallPosY=INT
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"wall" name=ID "{"
		//"wallWidth" "=" wallWidth=INT
		//"wallHeight" "=" wallHeight=INT
		//"wallPosX" "=" wallPosX=INT
		//"wallPosY" "=" wallPosY=INT
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"wall"
		public Keyword getWallKeyword_0() { return cWallKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"wallWidth"
		public Keyword getWallWidthKeyword_3() { return cWallWidthKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//wallWidth=INT
		public Assignment getWallWidthAssignment_5() { return cWallWidthAssignment_5; }
		
		//INT
		public RuleCall getWallWidthINTTerminalRuleCall_5_0() { return cWallWidthINTTerminalRuleCall_5_0; }
		
		//"wallHeight"
		public Keyword getWallHeightKeyword_6() { return cWallHeightKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//wallHeight=INT
		public Assignment getWallHeightAssignment_8() { return cWallHeightAssignment_8; }
		
		//INT
		public RuleCall getWallHeightINTTerminalRuleCall_8_0() { return cWallHeightINTTerminalRuleCall_8_0; }
		
		//"wallPosX"
		public Keyword getWallPosXKeyword_9() { return cWallPosXKeyword_9; }
		
		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//wallPosX=INT
		public Assignment getWallPosXAssignment_11() { return cWallPosXAssignment_11; }
		
		//INT
		public RuleCall getWallPosXINTTerminalRuleCall_11_0() { return cWallPosXINTTerminalRuleCall_11_0; }
		
		//"wallPosY"
		public Keyword getWallPosYKeyword_12() { return cWallPosYKeyword_12; }
		
		//"="
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }
		
		//wallPosY=INT
		public Assignment getWallPosYAssignment_14() { return cWallPosYAssignment_14; }
		
		//INT
		public RuleCall getWallPosYINTTerminalRuleCall_14_0() { return cWallPosYINTTerminalRuleCall_14_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class FieldSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.FieldSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEnemyCountKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEnemyCountAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnemyCountINTTerminalRuleCall_5_0 = (RuleCall)cEnemyCountAssignment_5.eContents().get(0);
		private final Assignment cObstacleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cObstacleObstaclepecificationParserRuleCall_6_0 = (RuleCall)cObstacleAssignment_6.eContents().get(0);
		private final Keyword cNextLevelKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGotoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNextLevelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cNextLevelFieldSpecificationCrossReference_9_0 = (CrossReference)cNextLevelAssignment_9.eContents().get(0);
		private final RuleCall cNextLevelFieldSpecificationIDTerminalRuleCall_9_0_1 = (RuleCall)cNextLevelFieldSpecificationCrossReference_9_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FieldSpecification:
		//	"field" name=ID "{"
		//	"enemyCount" "=" enemyCount=INT
		//	obstacle=Obstaclepecification
		//	"nextLevel" "goto" nextLevel=[FieldSpecification]
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"field" name=ID "{"
		//"enemyCount" "=" enemyCount=INT
		//obstacle=Obstaclepecification
		//"nextLevel" "goto" nextLevel=[FieldSpecification]
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"enemyCount"
		public Keyword getEnemyCountKeyword_3() { return cEnemyCountKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//enemyCount=INT
		public Assignment getEnemyCountAssignment_5() { return cEnemyCountAssignment_5; }
		
		//INT
		public RuleCall getEnemyCountINTTerminalRuleCall_5_0() { return cEnemyCountINTTerminalRuleCall_5_0; }
		
		//obstacle=Obstaclepecification
		public Assignment getObstacleAssignment_6() { return cObstacleAssignment_6; }
		
		//Obstaclepecification
		public RuleCall getObstacleObstaclepecificationParserRuleCall_6_0() { return cObstacleObstaclepecificationParserRuleCall_6_0; }
		
		//"nextLevel"
		public Keyword getNextLevelKeyword_7() { return cNextLevelKeyword_7; }
		
		//"goto"
		public Keyword getGotoKeyword_8() { return cGotoKeyword_8; }
		
		//nextLevel=[FieldSpecification]
		public Assignment getNextLevelAssignment_9() { return cNextLevelAssignment_9; }
		
		//[FieldSpecification]
		public CrossReference getNextLevelFieldSpecificationCrossReference_9_0() { return cNextLevelFieldSpecificationCrossReference_9_0; }
		
		//ID
		public RuleCall getNextLevelFieldSpecificationIDTerminalRuleCall_9_0_1() { return cNextLevelFieldSpecificationIDTerminalRuleCall_9_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class FieldInitialisationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.FieldInitialisations");
		private final RuleCall cLocalFieldInitialisationsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldInitialisations:
		//	LocalFieldInitialisations;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalFieldInitialisations
		public RuleCall getLocalFieldInitialisationsParserRuleCall() { return cLocalFieldInitialisationsParserRuleCall; }
	}
	public class LocalFieldInitialisationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.LocalFieldInitialisations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInitialisationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInitialisationsFieldInitialisationParserRuleCall_2_0_0 = (RuleCall)cInitialisationsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LocalFieldInitialisations:
		//	"init" "{" (initialisations+=FieldInitialisation ";")+ "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"init" "{" (initialisations+=FieldInitialisation ";")+ "}"
		public Group getGroup() { return cGroup; }
		
		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(initialisations+=FieldInitialisation ";")+
		public Group getGroup_2() { return cGroup_2; }
		
		//initialisations+=FieldInitialisation
		public Assignment getInitialisationsAssignment_2_0() { return cInitialisationsAssignment_2_0; }
		
		//FieldInitialisation
		public RuleCall getInitialisationsFieldInitialisationParserRuleCall_2_0_0() { return cInitialisationsFieldInitialisationParserRuleCall_2_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.FieldInitialisation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefaultInitialisationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomInitialisationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContextInitialisationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FieldInitialisation:
		//	DefaultInitialisation | RandomInitialisation | ContextInitialisation;
		@Override public ParserRule getRule() { return rule; }
		
		//DefaultInitialisation | RandomInitialisation | ContextInitialisation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefaultInitialisation
		public RuleCall getDefaultInitialisationParserRuleCall_0() { return cDefaultInitialisationParserRuleCall_0; }
		
		//RandomInitialisation
		public RuleCall getRandomInitialisationParserRuleCall_1() { return cRandomInitialisationParserRuleCall_1; }
		
		//ContextInitialisation
		public RuleCall getContextInitialisationParserRuleCall_2() { return cContextInitialisationParserRuleCall_2; }
	}
	public class DefaultInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.DefaultInitialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefaultInitialisationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DefaultInitialisation:
		//	"default" ":" "defaultInitialisation";
		@Override public ParserRule getRule() { return rule; }
		
		//"default" ":" "defaultInitialisation"
		public Group getGroup() { return cGroup; }
		
		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"defaultInitialisation"
		public Keyword getDefaultInitialisationKeyword_2() { return cDefaultInitialisationKeyword_2; }
	}
	public class RandomInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.RandomInitialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRandomInitialisationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RandomInitialisation:
		//	"random" ":" "randomInitialisation";
		@Override public ParserRule getRule() { return rule; }
		
		//"random" ":" "randomInitialisation"
		public Group getGroup() { return cGroup; }
		
		//"random"
		public Keyword getRandomKeyword_0() { return cRandomKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"randomInitialisation"
		public Keyword getRandomInitialisationKeyword_2() { return cRandomInitialisationKeyword_2; }
	}
	public class ContextInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.ContextInitialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContextInitialisationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// FIXME This should support a number of values, one for each variable defined for the cell type
		//ContextInitialisation:
		//	"context" ":" "contextInitialisation";
		@Override public ParserRule getRule() { return rule; }
		
		//"context" ":" "contextInitialisation"
		public Group getGroup() { return cGroup; }
		
		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"contextInitialisation"
		public Keyword getContextInitialisationKeyword_2() { return cContextInitialisationKeyword_2; }
	}
	public class OptionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.OptionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartFieldDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAllowRestartMenuParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSuperModeDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEndGameBehaviourParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OptionSpecification:
		//	StartFieldDeclaration | AllowRestartMenu | SuperModeDeclaration | EndGameBehaviour;
		@Override public ParserRule getRule() { return rule; }
		
		//StartFieldDeclaration | AllowRestartMenu | SuperModeDeclaration | EndGameBehaviour
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartFieldDeclaration
		public RuleCall getStartFieldDeclarationParserRuleCall_0() { return cStartFieldDeclarationParserRuleCall_0; }
		
		//AllowRestartMenu
		public RuleCall getAllowRestartMenuParserRuleCall_1() { return cAllowRestartMenuParserRuleCall_1; }
		
		//SuperModeDeclaration
		public RuleCall getSuperModeDeclarationParserRuleCall_2() { return cSuperModeDeclarationParserRuleCall_2; }
		
		//EndGameBehaviour
		public RuleCall getEndGameBehaviourParserRuleCall_3() { return cEndGameBehaviourParserRuleCall_3; }
	}
	public class SuperModeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.SuperModeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperModeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSuperModeDeclarationAction_1 = (Action)cGroup.eContents().get(1);
		
		//SuperModeDeclaration:
		//	"superMode" {SuperModeDeclaration};
		@Override public ParserRule getRule() { return rule; }
		
		//"superMode" {SuperModeDeclaration}
		public Group getGroup() { return cGroup; }
		
		//"superMode"
		public Keyword getSuperModeKeyword_0() { return cSuperModeKeyword_0; }
		
		//{SuperModeDeclaration}
		public Action getSuperModeDeclarationAction_1() { return cSuperModeDeclarationAction_1; }
	}
	public class StartFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.StartFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFieldFieldSpecificationCrossReference_2_0 = (CrossReference)cFieldAssignment_2.eContents().get(0);
		private final RuleCall cFieldFieldSpecificationIDTerminalRuleCall_2_0_1 = (RuleCall)cFieldFieldSpecificationCrossReference_2_0.eContents().get(1);
		
		//StartFieldDeclaration:
		//	"start" "=" field=[FieldSpecification];
		@Override public ParserRule getRule() { return rule; }
		
		//"start" "=" field=[FieldSpecification]
		public Group getGroup() { return cGroup; }
		
		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//field=[FieldSpecification]
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//[FieldSpecification]
		public CrossReference getFieldFieldSpecificationCrossReference_2_0() { return cFieldFieldSpecificationCrossReference_2_0; }
		
		//ID
		public RuleCall getFieldFieldSpecificationIDTerminalRuleCall_2_0_1() { return cFieldFieldSpecificationIDTerminalRuleCall_2_0_1; }
	}
	public class AllowRestartMenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.cf.tankwar.TankWar.AllowRestartMenu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllowRestartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAllowRestartMenuAction_1 = (Action)cGroup.eContents().get(1);
		
		//AllowRestartMenu:
		//	"allowRestart" {AllowRestartMenu};
		@Override public ParserRule getRule() { return rule; }
		
		//"allowRestart" {AllowRestartMenu}
		public Group getGroup() { return cGroup; }
		
		//"allowRestart"
		public Keyword getAllowRestartKeyword_0() { return cAllowRestartKeyword_0; }
		
		//{AllowRestartMenu}
		public Action getAllowRestartMenuAction_1() { return cAllowRestartMenuAction_1; }
	}
	
	
	private final TankWarGameElements pTankWarGame;
	private final ValueElements pValue;
	private final DirectBehaviourElements pDirectBehaviour;
	private final EndGameBehaviourElements pEndGameBehaviour;
	private final NoOpBehaviourElements pNoOpBehaviour;
	private final StringValueElements pStringValue;
	private final IntValueElements pIntValue;
	private final ScreenSpecificationElements pScreenSpecification;
	private final ObstaclepecificationElements pObstaclepecification;
	private final ObstacleMemberElements pObstacleMember;
	private final WaterObstacleElements pWaterObstacle;
	private final WallObstacleElements pWallObstacle;
	private final FieldSpecificationElements pFieldSpecification;
	private final FieldInitialisationsElements pFieldInitialisations;
	private final LocalFieldInitialisationsElements pLocalFieldInitialisations;
	private final FieldInitialisationElements pFieldInitialisation;
	private final DefaultInitialisationElements pDefaultInitialisation;
	private final RandomInitialisationElements pRandomInitialisation;
	private final ContextInitialisationElements pContextInitialisation;
	private final OptionSpecificationElements pOptionSpecification;
	private final SuperModeDeclarationElements pSuperModeDeclaration;
	private final StartFieldDeclarationElements pStartFieldDeclaration;
	private final AllowRestartMenuElements pAllowRestartMenu;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TankWarGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTankWarGame = new TankWarGameElements();
		this.pValue = new ValueElements();
		this.pDirectBehaviour = new DirectBehaviourElements();
		this.pEndGameBehaviour = new EndGameBehaviourElements();
		this.pNoOpBehaviour = new NoOpBehaviourElements();
		this.pStringValue = new StringValueElements();
		this.pIntValue = new IntValueElements();
		this.pScreenSpecification = new ScreenSpecificationElements();
		this.pObstaclepecification = new ObstaclepecificationElements();
		this.pObstacleMember = new ObstacleMemberElements();
		this.pWaterObstacle = new WaterObstacleElements();
		this.pWallObstacle = new WallObstacleElements();
		this.pFieldSpecification = new FieldSpecificationElements();
		this.pFieldInitialisations = new FieldInitialisationsElements();
		this.pLocalFieldInitialisations = new LocalFieldInitialisationsElements();
		this.pFieldInitialisation = new FieldInitialisationElements();
		this.pDefaultInitialisation = new DefaultInitialisationElements();
		this.pRandomInitialisation = new RandomInitialisationElements();
		this.pContextInitialisation = new ContextInitialisationElements();
		this.pOptionSpecification = new OptionSpecificationElements();
		this.pSuperModeDeclaration = new SuperModeDeclarationElements();
		this.pStartFieldDeclaration = new StartFieldDeclarationElements();
		this.pAllowRestartMenu = new AllowRestartMenuElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mdd.cf.tankwar.TankWar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TankWarGame:
	//	"game" name=ID "{"
	//	screen=ScreenSpecification
	//	fields+=FieldSpecification+
	//	options+=OptionSpecification+
	//	"}";
	public TankWarGameElements getTankWarGameAccess() {
		return pTankWarGame;
	}
	
	public ParserRule getTankWarGameRule() {
		return getTankWarGameAccess().getRule();
	}
	
	//Value:
	//	StringValue | IntValue | DirectBehaviour;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//DirectBehaviour:
	//	EndGameBehaviour | NoOpBehaviour {NoOpBehaviour};
	public DirectBehaviourElements getDirectBehaviourAccess() {
		return pDirectBehaviour;
	}
	
	public ParserRule getDirectBehaviourRule() {
		return getDirectBehaviourAccess().getRule();
	}
	
	//EndGameBehaviour:
	//	"end-game" "(" win=STRING "," lost=STRING ")";
	public EndGameBehaviourElements getEndGameBehaviourAccess() {
		return pEndGameBehaviour;
	}
	
	public ParserRule getEndGameBehaviourRule() {
		return getEndGameBehaviourAccess().getRule();
	}
	
	//NoOpBehaviour:
	//	"nop";
	public NoOpBehaviourElements getNoOpBehaviourAccess() {
		return pNoOpBehaviour;
	}
	
	public ParserRule getNoOpBehaviourRule() {
		return getNoOpBehaviourAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//ScreenSpecification:
	//	"screen" name=ID "{"
	//	"screenWidth" "=" screenWidth=INT
	//	"screenHeight" "=" screenHeight=INT
	//	"}";
	public ScreenSpecificationElements getScreenSpecificationAccess() {
		return pScreenSpecification;
	}
	
	public ParserRule getScreenSpecificationRule() {
		return getScreenSpecificationAccess().getRule();
	}
	
	//Obstaclepecification:
	//	"obstacle" name=ID "{"
	//	fields+=ObstacleMember*
	//	"}";
	public ObstaclepecificationElements getObstaclepecificationAccess() {
		return pObstaclepecification;
	}
	
	public ParserRule getObstaclepecificationRule() {
		return getObstaclepecificationAccess().getRule();
	}
	
	//ObstacleMember:
	//	WallObstacle | WaterObstacle;
	public ObstacleMemberElements getObstacleMemberAccess() {
		return pObstacleMember;
	}
	
	public ParserRule getObstacleMemberRule() {
		return getObstacleMemberAccess().getRule();
	}
	
	//WaterObstacle:
	//	"water" name=ID "{"
	//	"}";
	public WaterObstacleElements getWaterObstacleAccess() {
		return pWaterObstacle;
	}
	
	public ParserRule getWaterObstacleRule() {
		return getWaterObstacleAccess().getRule();
	}
	
	//WallObstacle:
	//	"wall" name=ID "{"
	//	"wallWidth" "=" wallWidth=INT
	//	"wallHeight" "=" wallHeight=INT
	//	"wallPosX" "=" wallPosX=INT
	//	"wallPosY" "=" wallPosY=INT
	//	"}";
	public WallObstacleElements getWallObstacleAccess() {
		return pWallObstacle;
	}
	
	public ParserRule getWallObstacleRule() {
		return getWallObstacleAccess().getRule();
	}
	
	//FieldSpecification:
	//	"field" name=ID "{"
	//	"enemyCount" "=" enemyCount=INT
	//	obstacle=Obstaclepecification
	//	"nextLevel" "goto" nextLevel=[FieldSpecification]
	//	"}";
	public FieldSpecificationElements getFieldSpecificationAccess() {
		return pFieldSpecification;
	}
	
	public ParserRule getFieldSpecificationRule() {
		return getFieldSpecificationAccess().getRule();
	}
	
	//FieldInitialisations:
	//	LocalFieldInitialisations;
	public FieldInitialisationsElements getFieldInitialisationsAccess() {
		return pFieldInitialisations;
	}
	
	public ParserRule getFieldInitialisationsRule() {
		return getFieldInitialisationsAccess().getRule();
	}
	
	//LocalFieldInitialisations:
	//	"init" "{" (initialisations+=FieldInitialisation ";")+ "}";
	public LocalFieldInitialisationsElements getLocalFieldInitialisationsAccess() {
		return pLocalFieldInitialisations;
	}
	
	public ParserRule getLocalFieldInitialisationsRule() {
		return getLocalFieldInitialisationsAccess().getRule();
	}
	
	//FieldInitialisation:
	//	DefaultInitialisation | RandomInitialisation | ContextInitialisation;
	public FieldInitialisationElements getFieldInitialisationAccess() {
		return pFieldInitialisation;
	}
	
	public ParserRule getFieldInitialisationRule() {
		return getFieldInitialisationAccess().getRule();
	}
	
	//DefaultInitialisation:
	//	"default" ":" "defaultInitialisation";
	public DefaultInitialisationElements getDefaultInitialisationAccess() {
		return pDefaultInitialisation;
	}
	
	public ParserRule getDefaultInitialisationRule() {
		return getDefaultInitialisationAccess().getRule();
	}
	
	//RandomInitialisation:
	//	"random" ":" "randomInitialisation";
	public RandomInitialisationElements getRandomInitialisationAccess() {
		return pRandomInitialisation;
	}
	
	public ParserRule getRandomInitialisationRule() {
		return getRandomInitialisationAccess().getRule();
	}
	
	//// FIXME This should support a number of values, one for each variable defined for the cell type
	//ContextInitialisation:
	//	"context" ":" "contextInitialisation";
	public ContextInitialisationElements getContextInitialisationAccess() {
		return pContextInitialisation;
	}
	
	public ParserRule getContextInitialisationRule() {
		return getContextInitialisationAccess().getRule();
	}
	
	//OptionSpecification:
	//	StartFieldDeclaration | AllowRestartMenu | SuperModeDeclaration | EndGameBehaviour;
	public OptionSpecificationElements getOptionSpecificationAccess() {
		return pOptionSpecification;
	}
	
	public ParserRule getOptionSpecificationRule() {
		return getOptionSpecificationAccess().getRule();
	}
	
	//SuperModeDeclaration:
	//	"superMode" {SuperModeDeclaration};
	public SuperModeDeclarationElements getSuperModeDeclarationAccess() {
		return pSuperModeDeclaration;
	}
	
	public ParserRule getSuperModeDeclarationRule() {
		return getSuperModeDeclarationAccess().getRule();
	}
	
	//StartFieldDeclaration:
	//	"start" "=" field=[FieldSpecification];
	public StartFieldDeclarationElements getStartFieldDeclarationAccess() {
		return pStartFieldDeclaration;
	}
	
	public ParserRule getStartFieldDeclarationRule() {
		return getStartFieldDeclarationAccess().getRule();
	}
	
	//AllowRestartMenu:
	//	"allowRestart" {AllowRestartMenu};
	public AllowRestartMenuElements getAllowRestartMenuAccess() {
		return pAllowRestartMenu;
	}
	
	public ParserRule getAllowRestartMenuRule() {
		return getAllowRestartMenuAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
