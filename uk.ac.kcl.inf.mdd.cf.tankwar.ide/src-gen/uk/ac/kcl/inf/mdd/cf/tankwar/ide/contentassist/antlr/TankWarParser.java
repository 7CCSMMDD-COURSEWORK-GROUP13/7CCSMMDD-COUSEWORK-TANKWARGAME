/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.mdd.cf.tankwar.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.mdd.cf.tankwar.ide.contentassist.antlr.internal.InternalTankWarParser;
import uk.ac.kcl.inf.mdd.cf.tankwar.services.TankWarGrammarAccess;

public class TankWarParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TankWarGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TankWarGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getDirectBehaviourAccess().getAlternatives(), "rule__DirectBehaviour__Alternatives");
			builder.put(grammarAccess.getObstacleMemberAccess().getAlternatives(), "rule__ObstacleMember__Alternatives");
			builder.put(grammarAccess.getFieldInitialisationAccess().getAlternatives(), "rule__FieldInitialisation__Alternatives");
			builder.put(grammarAccess.getOptionSpecificationAccess().getAlternatives(), "rule__OptionSpecification__Alternatives");
			builder.put(grammarAccess.getTankWarGameAccess().getGroup(), "rule__TankWarGame__Group__0");
			builder.put(grammarAccess.getDirectBehaviourAccess().getGroup_1(), "rule__DirectBehaviour__Group_1__0");
			builder.put(grammarAccess.getEndGameBehaviourAccess().getGroup(), "rule__EndGameBehaviour__Group__0");
			builder.put(grammarAccess.getScreenSpecificationAccess().getGroup(), "rule__ScreenSpecification__Group__0");
			builder.put(grammarAccess.getObstaclepecificationAccess().getGroup(), "rule__Obstaclepecification__Group__0");
			builder.put(grammarAccess.getWaterObstacleAccess().getGroup(), "rule__WaterObstacle__Group__0");
			builder.put(grammarAccess.getWallObstacleAccess().getGroup(), "rule__WallObstacle__Group__0");
			builder.put(grammarAccess.getFieldSpecificationAccess().getGroup(), "rule__FieldSpecification__Group__0");
			builder.put(grammarAccess.getLocalFieldInitialisationsAccess().getGroup(), "rule__LocalFieldInitialisations__Group__0");
			builder.put(grammarAccess.getLocalFieldInitialisationsAccess().getGroup_2(), "rule__LocalFieldInitialisations__Group_2__0");
			builder.put(grammarAccess.getDefaultInitialisationAccess().getGroup(), "rule__DefaultInitialisation__Group__0");
			builder.put(grammarAccess.getRandomInitialisationAccess().getGroup(), "rule__RandomInitialisation__Group__0");
			builder.put(grammarAccess.getContextInitialisationAccess().getGroup(), "rule__ContextInitialisation__Group__0");
			builder.put(grammarAccess.getSuperModeDeclarationAccess().getGroup(), "rule__SuperModeDeclaration__Group__0");
			builder.put(grammarAccess.getStartFieldDeclarationAccess().getGroup(), "rule__StartFieldDeclaration__Group__0");
			builder.put(grammarAccess.getAllowRestartMenuAccess().getGroup(), "rule__AllowRestartMenu__Group__0");
			builder.put(grammarAccess.getTankWarGameAccess().getNameAssignment_1(), "rule__TankWarGame__NameAssignment_1");
			builder.put(grammarAccess.getTankWarGameAccess().getScreenAssignment_3(), "rule__TankWarGame__ScreenAssignment_3");
			builder.put(grammarAccess.getTankWarGameAccess().getObstacleAssignment_4(), "rule__TankWarGame__ObstacleAssignment_4");
			builder.put(grammarAccess.getTankWarGameAccess().getFieldsAssignment_5(), "rule__TankWarGame__FieldsAssignment_5");
			builder.put(grammarAccess.getTankWarGameAccess().getOptionsAssignment_6(), "rule__TankWarGame__OptionsAssignment_6");
			builder.put(grammarAccess.getEndGameBehaviourAccess().getWinAssignment_2(), "rule__EndGameBehaviour__WinAssignment_2");
			builder.put(grammarAccess.getEndGameBehaviourAccess().getLostAssignment_4(), "rule__EndGameBehaviour__LostAssignment_4");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
			builder.put(grammarAccess.getScreenSpecificationAccess().getNameAssignment_1(), "rule__ScreenSpecification__NameAssignment_1");
			builder.put(grammarAccess.getScreenSpecificationAccess().getScreenWidthAssignment_5(), "rule__ScreenSpecification__ScreenWidthAssignment_5");
			builder.put(grammarAccess.getScreenSpecificationAccess().getScreenHeightAssignment_8(), "rule__ScreenSpecification__ScreenHeightAssignment_8");
			builder.put(grammarAccess.getObstaclepecificationAccess().getNameAssignment_1(), "rule__Obstaclepecification__NameAssignment_1");
			builder.put(grammarAccess.getObstaclepecificationAccess().getFieldsAssignment_3(), "rule__Obstaclepecification__FieldsAssignment_3");
			builder.put(grammarAccess.getWaterObstacleAccess().getNameAssignment_1(), "rule__WaterObstacle__NameAssignment_1");
			builder.put(grammarAccess.getWallObstacleAccess().getNameAssignment_1(), "rule__WallObstacle__NameAssignment_1");
			builder.put(grammarAccess.getWallObstacleAccess().getWallWidthAssignment_5(), "rule__WallObstacle__WallWidthAssignment_5");
			builder.put(grammarAccess.getWallObstacleAccess().getWallHeightAssignment_8(), "rule__WallObstacle__WallHeightAssignment_8");
			builder.put(grammarAccess.getWallObstacleAccess().getWallPosXAssignment_11(), "rule__WallObstacle__WallPosXAssignment_11");
			builder.put(grammarAccess.getWallObstacleAccess().getWallPosYAssignment_14(), "rule__WallObstacle__WallPosYAssignment_14");
			builder.put(grammarAccess.getFieldSpecificationAccess().getNameAssignment_1(), "rule__FieldSpecification__NameAssignment_1");
			builder.put(grammarAccess.getFieldSpecificationAccess().getEnemyCountAssignment_5(), "rule__FieldSpecification__EnemyCountAssignment_5");
			builder.put(grammarAccess.getLocalFieldInitialisationsAccess().getInitialisationsAssignment_2_0(), "rule__LocalFieldInitialisations__InitialisationsAssignment_2_0");
			builder.put(grammarAccess.getStartFieldDeclarationAccess().getFieldAssignment_2(), "rule__StartFieldDeclaration__FieldAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TankWarGrammarAccess grammarAccess;

	@Override
	protected InternalTankWarParser createParser() {
		InternalTankWarParser result = new InternalTankWarParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TankWarGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TankWarGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
